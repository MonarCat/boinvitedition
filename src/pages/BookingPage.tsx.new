import { useState, useEffect } from "react";
import { ensureAuthButtonsVisible } from "@/utils/buttonVisibility";
import { useParams } from "react-router-dom";
import { PaymentReceipt } from "@/components/payment/PaymentReceipt";
import { useClientPayments } from "@/hooks/useClientPayments";
import { MobileBookingHeader } from "@/components/booking/MobileBookingHeader";
import { EnhancedBusinessHeader } from "@/components/booking/EnhancedBusinessHeader";
import { ServiceSelectionCard } from "@/components/booking/ServiceSelectionCard";
import { DateTimeSelectionCard } from "@/components/booking/DateTimeSelectionCard";
import { BookingSummaryCard } from "@/components/booking/BookingSummaryCard";
import { ClientInformationCard } from "@/components/booking/ClientInformationCard";
import { CleanBookingLayout } from "@/components/booking/CleanBookingLayout";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { DirectBusinessPayment } from "@/components/payment/DirectBusinessPayment";
import { supabase } from "@/integrations/supabase/client";
import { EnhancedTransportBooking } from "@/components/transport/EnhancedTransportBooking";
import { TaxiBooking } from "@/components/transport/TaxiBooking";
import { ShuttleSeatMap } from "@/components/transport/ShuttleSeatMap";

interface BookingDetails {
  id: string;
  service_name: string;
  booking_date: string;
  booking_time: string;
  total_amount: number;
  currency: string;
  customer_name: string;
  customer_email: string;
  payment_reference: string;
}

// Mock transport details - in a real app, this would come from an API call or database
const mockTransportDetails = {
  route: { 
    from: "Nairobi CBD",
    to: "Westlands"
  },
  passengers: { 
    adult: 1, 
    child: 0, 
    infant: 0 
  },
  luggage: 1,
  departure_time: "08:00 AM",
  expected_arrival: "08:45 AM",
  vehicle: {
    registration_number: "KCB 123A",
    body_type: "Taxi",
    driver_name: "John Doe",
    driver_phone: "+254700123456"
  },
  seat_layout: "4-seater",
  price_range: { min: 300, max: 500 },
  exact_price: 350
};

const BookingPage = () => {
  const { businessId } = useParams();
  const [selectedDate, setSelectedDate] = useState<Date>();
  const [selectedService, setSelectedService] = useState("");
  const [selectedTime, setSelectedTime] = useState("");
  const [clientEmail, setClientEmail] = useState("");
  const [clientName, setClientName] = useState("");
  const [clientPhone, setClientPhone] = useState("");
  const [paymentCompleted, setPaymentCompleted] = useState(false);
  const [bookingDetails, setBookingDetails] = useState<BookingDetails | null>(
    null
  );
  const [isProcessing, setIsProcessing] = useState(false);
  const [showPayment, setShowPayment] = useState(false);
  const [pendingBookingId, setPendingBookingId] = useState<string | null>(null);
  const [transportDetails, setTransportDetails] = useState(mockTransportDetails);

  const { services, business, servicesLoading } = useClientPayments(
    businessId || ""
  );
  
  // Determine if the selected service is a transport service
  const selectedServiceData = selectedService ? services.find(s => s.id === selectedService) : null;
  
  // Check for transport service based on service name or transport_details
  const isTransportService = selectedServiceData?.is_transport_service === true || 
                            selectedServiceData?.transport_details !== undefined ||
                            selectedServiceData?.name?.toLowerCase().includes('taxi') || 
                            selectedServiceData?.name?.toLowerCase().includes('shuttle') || 
                            selectedServiceData?.name?.toLowerCase().includes('matatu') ||
                            selectedServiceData?.name?.toLowerCase().includes('transport') ||
                            business?.name?.toLowerCase().includes('taxi') ||
                            business?.name?.toLowerCase().includes('shuttle') ||
                            business?.name?.toLowerCase().includes('matatu');
  
  // Further determine if it's a taxi or shuttle service
  const isTaxiService = isTransportService && 
                       (selectedServiceData?.name?.toLowerCase().includes('taxi'));
  
  const isShuttleService = isTransportService && 
                          (selectedServiceData?.name?.toLowerCase().includes('shuttle') || 
                           selectedServiceData?.name?.toLowerCase().includes('matatu'));
  
  // Ensure auth buttons visibility
  useEffect(() => {
    ensureAuthButtonsVisible();
  }, []);

  const handleProceedToPayment = async () => {
    if (!isFormValid) {
      toast.error("Please fill in all fields before proceeding.");
      return;
    }

    setIsProcessing(true);
    const selectedServiceData = services.find((s) => s.id === selectedService);
    if (!selectedServiceData || !business || !selectedDate) {
      toast.error("Could not find booking details. Please try again.");
      setIsProcessing(false);
      return;
    }

    const { data: newBooking, error: bookingError } = await supabase
      .from("bookings")
      .insert({
        business_id: business.id,
        service_id: selectedServiceData.id,
        customer_name: clientName,
        customer_email: clientEmail,
        customer_phone: clientPhone,
        booking_date: selectedDate.toISOString().split("T")[0],
        booking_time: selectedTime,
        status: "pending",
        total_amount: selectedServiceData.price,
        duration_minutes: selectedServiceData.duration_minutes,
        client_id: null, // Assuming guest booking
      })
      .select("id")
      .single();

    if (bookingError || !newBooking) {
      console.error("Error creating pending booking:", bookingError);
      toast.error("Could not initiate booking. Please try again.");
      setIsProcessing(false);
      return;
    }

    setPendingBookingId(newBooking.id);
    setShowPayment(true);
    setIsProcessing(false);
  };

  const handlePaymentSuccess = async (reference: string) => {
    if (!pendingBookingId) {
      toast.error(
        "Critical error: Booking ID missing after payment. Please contact support."
      );
      return;
    }

    const { error: updateError } = await supabase
      .from("bookings")
      .update({
        status: "confirmed",
        payment_reference: reference,
        payment_method: "paystack",
      })
      .eq("id", pendingBookingId);

    if (updateError) {
      console.error("Error confirming booking:", updateError);
      toast.error(
        "Payment successful, but failed to confirm your booking. Please contact support."
      );
      return;
    }

    const selectedServiceData = services.find((s) => s.id === selectedService);
    if (!selectedServiceData || !business || !selectedDate) {
      toast.error(
        "Critical error: Booking details lost after payment. Please contact support."
      );
      return;
    }

    const bookingData: BookingDetails = {
      id: pendingBookingId,
      service_name: selectedServiceData.name,
      booking_date: selectedDate.toISOString(),
      booking_time: selectedTime,
      total_amount: selectedServiceData.price,
      currency: business.currency || "KES",
      payment_reference: reference,
      customer_name: clientName,
      customer_email: clientEmail,
    };
    setBookingDetails(bookingData);
    setPaymentCompleted(true);
    setShowPayment(false);
  };

  const handlePaymentError = (error: string) => {
    console.error("Payment failed:", error);
    toast.error(`Payment failed: ${error}`);
    setShowPayment(false);
  };

  const handleReceiptClose = () => {
    setPaymentCompleted(false);
    // Reset form
    setSelectedDate(undefined);
    setSelectedService("");
    setSelectedTime("");
    setClientEmail("");
    setClientName("");
    setClientPhone("");
    setBookingDetails(null);
    setPendingBookingId(null);
  };

  const isFormValid = selectedService && 
    // Regular booking flow validation
    (((!isTransportService) && selectedDate && selectedTime && clientEmail && clientName && clientPhone)
    // Transport booking validation is handled within the transport components
    || (isTransportService));

  if (servicesLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-black flex flex-col items-center justify-center text-slate-700 dark:text-slate-300">
        <Loader2 className="animate-spin h-12 w-12 text-blue-600 dark:text-blue-400" />
        <p className="mt-4 text-lg font-semibold">Loading business details...</p>
        <p className="text-sm">Please wait a moment.</p>
      </div>
    );
  }

  if (paymentCompleted && bookingDetails) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-black flex items-center justify-center p-4 md:p-6">
        <PaymentReceipt booking={bookingDetails} onClose={handleReceiptClose} />
      </div>
    );
  }

  if (showPayment) {
    const selectedServiceData = services.find((s) => s.id === selectedService);
    if (!selectedServiceData || !business) {
      toast.error("Required payment details are missing.");
      setShowPayment(false);
      return null;
    }

    return (
      <CleanBookingLayout>
        <div className="max-w-2xl mx-auto py-8">
          <DirectBusinessPayment
            businessId={business.id}
            businessName={business.name}
            amount={selectedServiceData.price}
            currency={business.currency || "KES"}
            bookingId={pendingBookingId || undefined}
            onSuccess={handlePaymentSuccess}
            onError={handlePaymentError}
          />
        </div>
      </CleanBookingLayout>
    );
  }

  const handleTransportBookingComplete = (bookingId: string) => {
    setPendingBookingId(bookingId);
    setShowPayment(true);
  };

  const BookingContent = () => (
    <div className="space-y-8">
      {business && (
        <EnhancedBusinessHeader business={business} />
      )}

      {/* Service Selection First */}
      <ServiceSelectionCard
        services={services}
        selectedService={selectedService}
        onServiceSelect={setSelectedService}
        business={business}
      />

      {/* Transport Service Booking */}
      {selectedService && isTransportService && (
        <div className="mt-8">
          {isTaxiService ? (
            <TaxiBooking
              serviceId={selectedService}
              businessId={business?.id || ''}
              serviceName={selectedServiceData?.name || ''}
              servicePrice={selectedServiceData?.price || 0}
              transportDetails={transportDetails}
              onBookingComplete={handleTransportBookingComplete}
            />
          ) : isShuttleService ? (
            <EnhancedTransportBooking
              serviceId={selectedService}
              businessId={business?.id || ''}
              serviceName={selectedServiceData?.name || ''}
              servicePrice={selectedServiceData?.price || 0}
              transportDetails={transportDetails}
              isShuttle={true}
              onBookingComplete={handleTransportBookingComplete}
            />
          ) : (
            <EnhancedTransportBooking
              serviceId={selectedService}
              businessId={business?.id || ''}
              serviceName={selectedServiceData?.name || ''}
              servicePrice={selectedServiceData?.price || 0}
              transportDetails={transportDetails}
              onBookingComplete={handleTransportBookingComplete}
            />
          )}
        </div>
      )}

      {/* Standard Booking Flow */}
      {selectedService && !isTransportService && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
          <div className="lg:col-span-2 space-y-8">
            <DateTimeSelectionCard
              selectedDate={selectedDate}
              selectedTime={selectedTime}
              onDateSelect={setSelectedDate}
              onTimeSelect={setSelectedTime}
            />
          </div>

          <div className="space-y-8 lg:sticky lg:top-8">
            <BookingSummaryCard
              selectedService={selectedService}
              selectedDate={selectedDate}
              selectedTime={selectedTime}
              services={services}
              business={business}
            />

            <ClientInformationCard
              clientName={clientName}
              clientEmail={clientEmail}
              clientPhone={clientPhone}
              onNameChange={setClientName}
              onEmailChange={setClientEmail}
              onPhoneChange={setClientPhone}
              onSubmit={handleProceedToPayment}
              isValid={!!isFormValid}
              isProcessing={isProcessing}
            />
          </div>
        </div>
      )}
    </div>
  );

  return (
    <CleanBookingLayout>
      {/* Mobile View */}
      <div className="lg:hidden">
        <MobileBookingHeader business={business}>
          <BookingContent />
        </MobileBookingHeader>
      </div>

      {/* Desktop View */}
      <div className="hidden lg:block">
        <BookingContent />
      </div>
    </CleanBookingLayout>
  );
};

export default BookingPage;
